name: Build, Upload Sarif with Trivy Scan

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  TRIVY_VERSION: 0.52.0
  DOCKER_IMAGE: ghcr.io/${{ github.repository }}

jobs:
  build_and_scan:
    name: Build, Scan and report
    runs-on: ubuntu-latest

    permissions:
      security-events: write
      contents: read
      actions: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          # Use the GitHub Container Registry
          # The registry is ghcr.io, and the username is the GitHub actor.
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

      - name: Install trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v${{ env.TRIVY_VERSION }}
          trivy --version

      - name: Run Trivy scan and generate SARIF results
        run: |
          trivy image \
          --format json \
          --output trivy-results.json \
          --show-suppressed \
          --vex ./openvex.json \
          --exit-code 0 \
          --severity HIGH,CRITICAL \
          ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

      - name: Create table of all known vulnerabilities (including suppressed)
        id: create_json
        run: |
          jq '[
            (.Results[].Vulnerabilities[]? | select(.VulnerabilityID != null) | {package: .PkgName, cve: .VulnerabilityID, version: .InstalledVersion, severity: .Severity, status: "active"}),
            (.Results[].Misconfigurations[]? | select(.Type == "VEX") | {package: .ID, cve: .Title, version: .Description, severity: .Severity, status: .Status})
          ] | flatten' trivy-results.json > vulnerabilities-table.json

          echo "JSON table created: vulnerabilities-table.json"
          cat vulnerabilities-table.json

      # - name: Filter suppressed vulnerabilities
      #   run: |
      #     jq 'del(.runs[].results[] | select(.suppressions != null))' trivy-results.sarif > trivy-filtered.sarif

      # - name: Upload Trivy scan results to GitHub Security tab
      #   if: always()
      #   uses: github/codeql-action/upload-sarif@v3
      #   with:
      #     sarif_file: "trivy-filtered.sarif"

      - name: Upload Scan Reports as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-reports
          path: |
            trivy-results.json
            vulnerabilities-table.json
